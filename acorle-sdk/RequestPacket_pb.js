// source: RequestPacket.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Acorle.Models.RequestPacket', null, global);
goog.exportSymbol('proto.Acorle.Models.RequestPacket.ActionType', null, global);
goog.exportSymbol('proto.Acorle.Models.RequestPacket.RpcRequest', null, global);
goog.exportSymbol('proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest', null, global);
goog.exportSymbol('proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest', null, global);
goog.exportSymbol('proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement', null, global);
goog.exportSymbol('proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest', null, global);
goog.exportSymbol('proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest', null, global);
goog.exportSymbol('proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest', null, global);
goog.exportSymbol('proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement', null, global);
goog.exportSymbol('proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest', null, global);
goog.exportSymbol('proto.Acorle.Models.RequestPacket.ServiceRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Acorle.Models.RequestPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Acorle.Models.RequestPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Acorle.Models.RequestPacket.displayName = 'proto.Acorle.Models.RequestPacket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Acorle.Models.RequestPacket.ServiceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Acorle.Models.RequestPacket.ServiceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Acorle.Models.RequestPacket.ServiceRequest.displayName = 'proto.Acorle.Models.RequestPacket.ServiceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Acorle.Models.RequestPacket.RpcRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Acorle.Models.RequestPacket.RpcRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Acorle.Models.RequestPacket.RpcRequest.displayName = 'proto.Acorle.Models.RequestPacket.RpcRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest.displayName = 'proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.repeatedFields_, null);
};
goog.inherits(proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.displayName = 'proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement.displayName = 'proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest.displayName = 'proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.repeatedFields_, null);
};
goog.inherits(proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.displayName = 'proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.displayName = 'proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest.displayName = 'proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest.displayName = 'proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Acorle.Models.RequestPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.Acorle.Models.RequestPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Acorle.Models.RequestPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.RequestPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    magic: msg.getMagic_asB64(),
    zone: jspb.Message.getFieldWithDefault(msg, 2, ""),
    action: jspb.Message.getFieldWithDefault(msg, 3, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Acorle.Models.RequestPacket}
 */
proto.Acorle.Models.RequestPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Acorle.Models.RequestPacket;
  return proto.Acorle.Models.RequestPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Acorle.Models.RequestPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Acorle.Models.RequestPacket}
 */
proto.Acorle.Models.RequestPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMagic(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setZone(value);
      break;
    case 3:
      var value = /** @type {!proto.Acorle.Models.RequestPacket.ActionType} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Acorle.Models.RequestPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Acorle.Models.RequestPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Acorle.Models.RequestPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.RequestPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMagic_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getZone();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Acorle.Models.RequestPacket.ActionType = {
  SVC_REQUEST: 0,
  RPC_REGISTER: 1,
  RPC_LIST: 2,
  RPC_GET: 3,
  RPC_CALL: 4,
  RPC_DESTROY: 5,
  RPC_CONFIG_GET: 6,
  RPC_CONFIG_SET: 7
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Acorle.Models.RequestPacket.ServiceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Acorle.Models.RequestPacket.ServiceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Acorle.Models.RequestPacket.ServiceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.RequestPacket.ServiceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Acorle.Models.RequestPacket.ServiceRequest}
 */
proto.Acorle.Models.RequestPacket.ServiceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Acorle.Models.RequestPacket.ServiceRequest;
  return proto.Acorle.Models.RequestPacket.ServiceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Acorle.Models.RequestPacket.ServiceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Acorle.Models.RequestPacket.ServiceRequest}
 */
proto.Acorle.Models.RequestPacket.ServiceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Acorle.Models.RequestPacket.ServiceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Acorle.Models.RequestPacket.ServiceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Acorle.Models.RequestPacket.ServiceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.RequestPacket.ServiceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.Acorle.Models.RequestPacket.ServiceRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Acorle.Models.RequestPacket.ServiceRequest} returns this
 */
proto.Acorle.Models.RequestPacket.ServiceRequest.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Acorle.Models.RequestPacket.ServiceRequest.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.Acorle.Models.RequestPacket.ServiceRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.Acorle.Models.RequestPacket.ServiceRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Acorle.Models.RequestPacket.ServiceRequest} returns this
 */
proto.Acorle.Models.RequestPacket.ServiceRequest.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Acorle.Models.RequestPacket.RpcRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.RequestPacket.RpcRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Acorle.Models.RequestPacket.RpcRequest;
  return proto.Acorle.Models.RequestPacket.RpcRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Acorle.Models.RequestPacket.RpcRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.RequestPacket.RpcRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest;
  return proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest} returns this
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcCallServiceRequest.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    servicesList: jspb.Message.toObjectList(msg.getServicesList(),
    proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest;
  return proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement;
      reader.readMessage(value,proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement.deserializeBinaryFromReader);
      msg.addServices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement.prototype.toObject = function(opt_includeInstance) {
  return proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    url: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement;
  return proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement} returns this
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement} returns this
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated DestroyServiceElement services = 1;
 * @return {!Array<!proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement>}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.prototype.getServicesList = function() {
  return /** @type{!Array<!proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement, 1));
};


/**
 * @param {!Array<!proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement>} value
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest} returns this
*/
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.prototype.setServicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.prototype.addServices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.DestroyServiceElement, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest} returns this
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcDestroyServiceRequest.prototype.clearServicesList = function() {
  return this.setServicesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest;
  return proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest} returns this
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetServiceRequest.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    servicesList: jspb.Message.toObjectList(msg.getServicesList(),
    proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest;
  return proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement;
      reader.readMessage(value,proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.deserializeBinaryFromReader);
      msg.addServices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.prototype.toObject = function(opt_includeInstance) {
  return proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    url: jspb.Message.getFieldWithDefault(msg, 3, ""),
    weight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    isPrivate: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement;
  return proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWeight(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPrivate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getWeight();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getIsPrivate();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement} returns this
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement} returns this
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string url = 3;
 * @return {string}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement} returns this
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 weight = 4;
 * @return {number}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement} returns this
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.prototype.setWeight = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool is_private = 5;
 * @return {boolean}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.prototype.getIsPrivate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement} returns this
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement.prototype.setIsPrivate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * repeated RegisterServiceElement services = 1;
 * @return {!Array<!proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement>}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.prototype.getServicesList = function() {
  return /** @type{!Array<!proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement, 1));
};


/**
 * @param {!Array<!proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement>} value
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest} returns this
*/
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.prototype.setServicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.prototype.addServices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.RegisterServiceElement, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest} returns this
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcRegisterServiceRequest.prototype.clearServicesList = function() {
  return this.setServicesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest;
  return proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest} returns this
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string hash = 2;
 * @return {string}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest} returns this
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcGetConfigRequest.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    context: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest;
  return proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContext();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest} returns this
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string context = 2;
 * @return {string}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest.prototype.getContext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest} returns this
 */
proto.Acorle.Models.RequestPacket.RpcRequest.RpcSetConfigRequest.prototype.setContext = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string signature = 1;
 * @return {string}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest} returns this
 */
proto.Acorle.Models.RequestPacket.RpcRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest} returns this
 */
proto.Acorle.Models.RequestPacket.RpcRequest.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.Acorle.Models.RequestPacket.RpcRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Acorle.Models.RequestPacket.RpcRequest} returns this
 */
proto.Acorle.Models.RequestPacket.RpcRequest.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes magic = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Acorle.Models.RequestPacket.prototype.getMagic = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes magic = 1;
 * This is a type-conversion wrapper around `getMagic()`
 * @return {string}
 */
proto.Acorle.Models.RequestPacket.prototype.getMagic_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMagic()));
};


/**
 * optional bytes magic = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMagic()`
 * @return {!Uint8Array}
 */
proto.Acorle.Models.RequestPacket.prototype.getMagic_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMagic()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Acorle.Models.RequestPacket} returns this
 */
proto.Acorle.Models.RequestPacket.prototype.setMagic = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string zone = 2;
 * @return {string}
 */
proto.Acorle.Models.RequestPacket.prototype.getZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Acorle.Models.RequestPacket} returns this
 */
proto.Acorle.Models.RequestPacket.prototype.setZone = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ActionType action = 3;
 * @return {!proto.Acorle.Models.RequestPacket.ActionType}
 */
proto.Acorle.Models.RequestPacket.prototype.getAction = function() {
  return /** @type {!proto.Acorle.Models.RequestPacket.ActionType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.Acorle.Models.RequestPacket.ActionType} value
 * @return {!proto.Acorle.Models.RequestPacket} returns this
 */
proto.Acorle.Models.RequestPacket.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.Acorle.Models.RequestPacket.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.Acorle.Models.RequestPacket.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.Acorle.Models.RequestPacket.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Acorle.Models.RequestPacket} returns this
 */
proto.Acorle.Models.RequestPacket.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


goog.object.extend(exports, proto.Acorle.Models);
