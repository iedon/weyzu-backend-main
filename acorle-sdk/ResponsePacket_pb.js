// source: ResponsePacket.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var HeaderKVPair_pb = require('./HeaderKVPair_pb.js');
goog.object.extend(proto, HeaderKVPair_pb);
goog.exportSymbol('proto.Acorle.Models.ResponsePacket', null, global);
goog.exportSymbol('proto.Acorle.Models.ResponsePacket.ResponseCodeType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Acorle.Models.ResponsePacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Acorle.Models.ResponsePacket.repeatedFields_, null);
};
goog.inherits(proto.Acorle.Models.ResponsePacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Acorle.Models.ResponsePacket.displayName = 'proto.Acorle.Models.ResponsePacket';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Acorle.Models.ResponsePacket.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Acorle.Models.ResponsePacket.prototype.toObject = function(opt_includeInstance) {
  return proto.Acorle.Models.ResponsePacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Acorle.Models.ResponsePacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.ResponsePacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    magic: msg.getMagic_asB64(),
    code: jspb.Message.getFieldWithDefault(msg, 2, 0),
    headersList: jspb.Message.toObjectList(msg.getHeadersList(),
    HeaderKVPair_pb.HeaderKVPair.toObject, includeInstance),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Acorle.Models.ResponsePacket}
 */
proto.Acorle.Models.ResponsePacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Acorle.Models.ResponsePacket;
  return proto.Acorle.Models.ResponsePacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Acorle.Models.ResponsePacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Acorle.Models.ResponsePacket}
 */
proto.Acorle.Models.ResponsePacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMagic(value);
      break;
    case 2:
      var value = /** @type {!proto.Acorle.Models.ResponsePacket.ResponseCodeType} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 3:
      var value = new HeaderKVPair_pb.HeaderKVPair;
      reader.readMessage(value,HeaderKVPair_pb.HeaderKVPair.deserializeBinaryFromReader);
      msg.addHeaders(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Acorle.Models.ResponsePacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Acorle.Models.ResponsePacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Acorle.Models.ResponsePacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Acorle.Models.ResponsePacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMagic_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      HeaderKVPair_pb.HeaderKVPair.serializeBinaryToWriter
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Acorle.Models.ResponsePacket.ResponseCodeType = {
  OK: 0,
  SERVER_EXCEPTION: 1000,
  NOT_FOUND: 1001,
  FORBIDDEN: 1002,
  BAD_GATEWAY: 1003,
  BAD_REQUEST: 1004,
  SERVICE_UNAVAILABLE: 1005,
  METHOD_NOT_ALLOWED: 1006,
  INVALID_BODY: 1007,
  RPC_INVALID_ZONE: 2000,
  RPC_OPERATION_FAILED: 2001,
  RPC_REG_LIMIT: 2002,
  RPC_RESPONSE_ERROR: 2003,
  RPC_RESPONSE_TIMEDOUT: 2004,
  RPC_NETWORK_EXCEPTION: 2005,
  RPC_CONFIG_NOT_FOUND: 2006,
  SVC_INVALID_ZONE: 3000,
  SVC_NOT_FOUND_OR_UNAVAILABLE: 3001
};

/**
 * optional bytes magic = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Acorle.Models.ResponsePacket.prototype.getMagic = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes magic = 1;
 * This is a type-conversion wrapper around `getMagic()`
 * @return {string}
 */
proto.Acorle.Models.ResponsePacket.prototype.getMagic_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMagic()));
};


/**
 * optional bytes magic = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMagic()`
 * @return {!Uint8Array}
 */
proto.Acorle.Models.ResponsePacket.prototype.getMagic_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMagic()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Acorle.Models.ResponsePacket} returns this
 */
proto.Acorle.Models.ResponsePacket.prototype.setMagic = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional ResponseCodeType code = 2;
 * @return {!proto.Acorle.Models.ResponsePacket.ResponseCodeType}
 */
proto.Acorle.Models.ResponsePacket.prototype.getCode = function() {
  return /** @type {!proto.Acorle.Models.ResponsePacket.ResponseCodeType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Acorle.Models.ResponsePacket.ResponseCodeType} value
 * @return {!proto.Acorle.Models.ResponsePacket} returns this
 */
proto.Acorle.Models.ResponsePacket.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated HeaderKVPair headers = 3;
 * @return {!Array<!proto.Acorle.Models.HeaderKVPair>}
 */
proto.Acorle.Models.ResponsePacket.prototype.getHeadersList = function() {
  return /** @type{!Array<!proto.Acorle.Models.HeaderKVPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, HeaderKVPair_pb.HeaderKVPair, 3));
};


/**
 * @param {!Array<!proto.Acorle.Models.HeaderKVPair>} value
 * @return {!proto.Acorle.Models.ResponsePacket} returns this
*/
proto.Acorle.Models.ResponsePacket.prototype.setHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Acorle.Models.HeaderKVPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Acorle.Models.HeaderKVPair}
 */
proto.Acorle.Models.ResponsePacket.prototype.addHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Acorle.Models.HeaderKVPair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Acorle.Models.ResponsePacket} returns this
 */
proto.Acorle.Models.ResponsePacket.prototype.clearHeadersList = function() {
  return this.setHeadersList([]);
};


/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.Acorle.Models.ResponsePacket.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.Acorle.Models.ResponsePacket.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.Acorle.Models.ResponsePacket.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Acorle.Models.ResponsePacket} returns this
 */
proto.Acorle.Models.ResponsePacket.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


goog.object.extend(exports, proto.Acorle.Models);
